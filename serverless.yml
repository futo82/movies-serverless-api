service: movies-serverless-api

frameworkVersion: ">=1.0.0 <2.0.0"

provider:
  name: aws
  runtime: python3.7
  environment:
    DYNAMODB_TABLE: Movies
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  create_movie:
    handler: handlers/create_movie.create
    events:
      - http:
          path: /v1/api/movies
          method: post
  
  get_movie:
    handler: handlers/get_movie.get
    events:
      - http:
          path: /v1/api/movies/{id}
          method: get

  update_movie:
    handler: handlers/update_movie.update
    events:
      - http:
          path: /v1/api/movies/{id}
          method: put

  delete_movie:
    handler: handlers/delete_movie.delete
    events:
      - http:
          path: /v1/api/movies/{id}
          method: delete

resources:
  Resources:
    MoviesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: movie-id
            AttributeType: S
        KeySchema:
          -
            AttributeName: movie-id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true